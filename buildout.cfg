[buildout]
extends =
    https://raw.github.com/plone/plone.app.robotframework/master/versions.cfg
    test-5.1.cfg

versions = versions
parts =
    code-analysis
    coverage-sh
    createcoverage
    versioncheck
    extras
    i18ndude
    instance
    omelette
    robot
    test
    pydev

include-site-packages = false
extensions =
    mr.developer
    plone.versioncheck
sources-dir = ${buildout:directory}/devsrc
develop = .
sources = sources
always-checkout = force
auto-checkout = *

find-links +=
    http://dist.repoze.org/
    http://effbot.org/downloads/

package-min-coverage = 80

[remotes]
github = git://github.com
github_push = git@github.com

[sources]
bdajax                      = git ${remotes:github}/bluedynamics/bdajax.git                    pushurl=${remotes:github_push}:bluedynamics/bdajax.git
yafowil                     = git ${remotes:github}/bluedynamics/yafowil.git                   pushurl=${remotes:github_push}:bluedynamics/yafowil.git
yafowil.yaml                = git ${remotes:github}/bluedynamics/yafowil.yaml.git              pushurl=${remotes:github_push}:bluedynamics/yafowil.yaml.git
yafowil.plone               = git ${remotes:github}/bluedynamics/yafowil.plone.git             pushurl=${remotes:github_push}:bluedynamics/yafowil.plone.git
yafowil.widget.datetime     = git ${remotes:github}/bluedynamics/yafowil.widget.datetime.git   pushurl=${remotes:github_push}:bluedynamics/yafowil.widget.datetime.git
node.ext.zodb               = git ${remotes:github}/bluedynamics/node.ext.zodb.git             pushurl=${remotes:github_push}:bluedynamics/node.ext.zodb.git
souper                      = git ${remotes:github}/bluedynamics/souper.git                    pushurl=${remotes:github_push}:bluedynamics/souper.git
souper.plone                = git ${remotes:github}/bluedynamics/souper.plone.git              pushurl=${remotes:github_push}:bluedynamics/souper.plone.git
bda.plone.cart              = git ${remotes:github}/bluedynamics/bda.plone.cart.git            pushurl=${remotes:github_push}:bluedynamics/bda.plone.cart.git
bda.plone.checkout          = git ${remotes:github}/bluedynamics/bda.plone.checkout.git        pushurl=${remotes:github_push}:bluedynamics/bda.plone.checkout.git
bda.plone.payment           = git ${remotes:github}/bluedynamics/bda.plone.payment.git         pushurl=${remotes:github_push}:bluedynamics/bda.plone.payment.git
bda.plone.orders            = git ${remotes:github}/bluedynamics/bda.plone.orders.git          pushurl=${remotes:github_push}:bluedynamics/bda.plone.orders.git
bda.plone.shipping          = git ${remotes:github}/bluedynamics/bda.plone.shipping.git        pushurl=${remotes:github_push}:bluedynamics/bda.plone.shipping.git
bda.plone.discount          = git ${remotes:github}/bluedynamics/bda.plone.discount.git        pushurl=${remotes:github_push}:bluedynamics/bda.plone.discount.git
bda.plone.shop              = git ${remotes:github}/bluedynamics/bda.plone.shop.git            pushurl=${remotes:github_push}:bluedynamics/bda.plone.shop.git
bda.plone.ajax              = git ${remotes:github}/collective/bda.plone.ajax.git              pushurl=${remotes:github_push}:collective/bda.plone.ajax.git
collective.instancebehavior = git https://github.com/collective/collective.instancebehavior.git

[instance]
recipe = plone.recipe.zope2instance
user = admin:admin
http-address = 8080
debug-mode = on
verbose-security = off
deprecation-warnings = on
blob-storage = var/blobstorage
environment-vars =
    zope_i18n_compile_mo_files true
eggs =
    Pillow
    Plone
    plone.app.debugtoolbar
    plone.reload
    ipdb
    Products.PrintingMailHost
    plone.app.contenttypes
    bda.plone.productshop
zcml =
    plone.reload
    plone.app.contenttypes

[i18ndude]
unzip = true
recipe = zc.recipe.egg
eggs = i18ndude

[omelette]
recipe = collective.recipe.omelette
eggs = ${instance:eggs}

[test]
recipe = zc.recipe.testrunner
defaults = ['--auto-color', '--auto-progress']
eggs =
    bda.plone.cart[test]
    bda.plone.checkout[test]
    bda.plone.orders[test]
    bda.plone.payment[test]
    bda.plone.shipping[test]
    bda.plone.discount[test]
    bda.plone.shop[test]
    bda.plone.productshop[test]

[pydev]
recipe = pb.recipes.pydev
eggs =
    ${test:eggs}

[robot]
recipe = zc.recipe.egg
eggs =
    ${test:eggs}
    plone.app.robotframework
# Good for debugging with "debug" robot keyword statement
    ipdb
    plone.reload
    plone.app.debugtoolbar
    Products.PrintingMailHost

[omelette]
recipe = collective.recipe.omelette
eggs = ${test:eggs}

[extras]
recipe = zc.recipe.egg
eggs =
    zptlint

[code-analysis]
recipe = plone.recipe.codeanalysis
directory = ${buildout:package-path}
pre-commit-hook = True
return-status-codes = True
clean-lines = True
csslint = False
csslint-bin = ${buildout:bin-directory}/csslint
debug-statements = True
deprecated-aliases = True
flake8-max-complexity = 12
imports = False
jscs = False
#jscs-bin = ${buildout:bin-directory}/jscs
#jscs-exclude =
    src/plone/app/imagecropping/browser/static/jquery.Jcrop.min.js
jshint = False
#jshint-bin = ${buildout:bin-directory}/jshint
#jshint-exclude = ${code-analysis:jscs-exclude}
pep3101 = True
prefer-single-quotes = False
return-status-codes = False
utf8-header = True
find-untranslated = True
i18ndude-bin = ${buildout:bin-directory}/i18ndude
zptlint = True
zptlint-bin = ${buildout:bin-directory}/zptlint

[coverage-sh]
recipe = collective.recipe.template
output = ${buildout:directory}/bin/coverage.sh
mode = 755
input = inline:
    #! /bin/sh
    # checks for report created with createcoverage and evaluate the result

    DEFAULT=${buildout:package-min-coverage}
    REPORT="htmlcov/index.html"

    if [ "$#" -eq 1 ] && [ $1 -ge 0 ] && [ $1 -le 100 ]; then
        MINIMUM=$1
    else
        echo "Invalid value for minimum coverage; using default: $DEFAULT%"
        MINIMUM=$DEFAULT
    fi

    bin/createcoverage run "bin/test -t ${buildout:package-name}"

    # find first percentage value in file (module test coverage) and return it
    COVERAGE=`grep "[0-9]\{1,3\}[%]" $REPORT -m 1 -o | grep "[0-9]\{1,3\}" -o`

    if [ $COVERAGE -lt $MINIMUM ]; then
        echo "Insufficient test coverage: $COVERAGE% (minimum acceptable is $MINIMUM%)"
        exit 1
    else
        echo "Current test coverage: $COVERAGE%"
        exit 0
    fi

[createcoverage]
recipe = zc.recipe.egg
eggs = createcoverage

[versioncheck]
recipe = zc.recipe.egg
eggs = plone.versioncheck

[versions]
zc.buildout =
setuptools =
coverage =
